// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if source is T {
            return source as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [AnalyzeRequest]
            Decoders.addDecoder(clazz: [AnalyzeRequest].self) { (source: AnyObject) -> [AnalyzeRequest] in
                return Decoders.decode(clazz: [AnalyzeRequest].self, source: source)
            }
            // Decoder for AnalyzeRequest
            Decoders.addDecoder(clazz: AnalyzeRequest.self) { (source: AnyObject) -> AnalyzeRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = AnalyzeRequest()
                instance.measure = Decoders.decodeOptional(clazz: Measure.self, source: sourceDictionary["measure"])
                instance.grouping = Decoders.decodeOptional(clazz: Reference.self, source: sourceDictionary["grouping"])
                instance.segment = Decoders.decodeOptional(clazz: Reference.self, source: sourceDictionary["segment"])
                instance.filterExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filterExpression"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                return instance
            }


            // Decoder for [BulkEventRemote]
            Decoders.addDecoder(clazz: [BulkEventRemote].self) { (source: AnyObject) -> [BulkEventRemote] in
                return Decoders.decode(clazz: [BulkEventRemote].self, source: source)
            }
            // Decoder for BulkEventRemote
            Decoders.addDecoder(clazz: BulkEventRemote.self) { (source: AnyObject) -> BulkEventRemote in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BulkEventRemote()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.urls = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["urls"])
                instance.type = BulkEventRemote.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")
                instance.compression = BulkEventRemote.Compression(rawValue: (sourceDictionary["compression"] as? String) ?? "")
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                return instance
            }


            // Decoder for [CheckLockKey]
            Decoders.addDecoder(clazz: [CheckLockKey].self) { (source: AnyObject) -> [CheckLockKey] in
                return Decoders.decode(clazz: [CheckLockKey].self, source: source)
            }
            // Decoder for CheckLockKey
            Decoders.addDecoder(clazz: CheckLockKey.self) { (source: AnyObject) -> CheckLockKey in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CheckLockKey()
                instance.lockKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lock_key"])
                return instance
            }


            // Decoder for [Collection]
            Decoders.addDecoder(clazz: [Collection].self) { (source: AnyObject) -> [Collection] in
                return Decoders.decode(clazz: [Collection].self, source: source)
            }
            // Decoder for Collection
            Decoders.addDecoder(clazz: Collection.self) { (source: AnyObject) -> Collection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Collection()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                return instance
            }


            // Decoder for [CollectionDefinition]
            Decoders.addDecoder(clazz: [CollectionDefinition].self) { (source: AnyObject) -> [CollectionDefinition] in
                return Decoders.decode(clazz: [CollectionDefinition].self, source: source)
            }
            // Decoder for CollectionDefinition
            Decoders.addDecoder(clazz: CollectionDefinition.self) { (source: AnyObject) -> CollectionDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CollectionDefinition()
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                return instance
            }


            // Decoder for [CollectionEvent]
            Decoders.addDecoder(clazz: [CollectionEvent].self) { (source: AnyObject) -> [CollectionEvent] in
                return Decoders.decode(clazz: [CollectionEvent].self, source: source)
            }
            // Decoder for CollectionEvent
            Decoders.addDecoder(clazz: CollectionEvent.self) { (source: AnyObject) -> CollectionEvent in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CollectionEvent()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.properties = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [CommitBulkEvents]
            Decoders.addDecoder(clazz: [CommitBulkEvents].self) { (source: AnyObject) -> [CommitBulkEvents] in
                return Decoders.decode(clazz: [CommitBulkEvents].self, source: source)
            }
            // Decoder for CommitBulkEvents
            Decoders.addDecoder(clazz: CommitBulkEvents.self) { (source: AnyObject) -> CommitBulkEvents in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CommitBulkEvents(collections: Decoders.decode(clazz: Array.self, source: sourceDictionary["collections"]!))
                return instance
            }


            // Decoder for [CommitRequest]
            Decoders.addDecoder(clazz: [CommitRequest].self) { (source: AnyObject) -> [CommitRequest] in
                return Decoders.decode(clazz: [CommitRequest].self, source: source)
            }
            // Decoder for CommitRequest
            Decoders.addDecoder(clazz: CommitRequest.self) { (source: AnyObject) -> CommitRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CommitRequest(collections: Decoders.decode(clazz: Array.self, source: sourceDictionary["collections"]!))
                return instance
            }


            // Decoder for [Condition]
            Decoders.addDecoder(clazz: [Condition].self) { (source: AnyObject) -> [Condition] in
                return Decoders.decode(clazz: [Condition].self, source: source)
            }
            // Decoder for Condition
            Decoders.addDecoder(clazz: Condition.self) { (source: AnyObject) -> Condition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Condition()
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.expectedValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expectedValue"])
                return instance
            }


            // Decoder for [ConfigItem]
            Decoders.addDecoder(clazz: [ConfigItem].self) { (source: AnyObject) -> [ConfigItem] in
                return Decoders.decode(clazz: [ConfigItem].self, source: source)
            }
            // Decoder for ConfigItem
            Decoders.addDecoder(clazz: ConfigItem.self) { (source: AnyObject) -> ConfigItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ConfigItem()
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.defaultValue = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultValue"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [ContinuousQuery]
            Decoders.addDecoder(clazz: [ContinuousQuery].self) { (source: AnyObject) -> [ContinuousQuery] in
                return Decoders.decode(clazz: [ContinuousQuery].self, source: source)
            }
            // Decoder for ContinuousQuery
            Decoders.addDecoder(clazz: ContinuousQuery.self) { (source: AnyObject) -> ContinuousQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQuery(name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), query: Decoders.decode(clazz: String.self, source: sourceDictionary["query"]!))
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tableName"])
                instance.partitionKeys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["partitionKeys"])
                return instance
            }


            // Decoder for [ContinuousQueryDeleteQuery]
            Decoders.addDecoder(clazz: [ContinuousQueryDeleteQuery].self) { (source: AnyObject) -> [ContinuousQueryDeleteQuery] in
                return Decoders.decode(clazz: [ContinuousQueryDeleteQuery].self, source: source)
            }
            // Decoder for ContinuousQueryDeleteQuery
            Decoders.addDecoder(clazz: ContinuousQueryDeleteQuery.self) { (source: AnyObject) -> ContinuousQueryDeleteQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQueryDeleteQuery()
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                return instance
            }


            // Decoder for [ContinuousQueryGetQuery]
            Decoders.addDecoder(clazz: [ContinuousQueryGetQuery].self) { (source: AnyObject) -> [ContinuousQueryGetQuery] in
                return Decoders.decode(clazz: [ContinuousQueryGetQuery].self, source: source)
            }
            // Decoder for ContinuousQueryGetQuery
            Decoders.addDecoder(clazz: ContinuousQueryGetQuery.self) { (source: AnyObject) -> ContinuousQueryGetQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQueryGetQuery()
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                return instance
            }


            // Decoder for [ContinuousQueryGetSchemaOfQuery]
            Decoders.addDecoder(clazz: [ContinuousQueryGetSchemaOfQuery].self) { (source: AnyObject) -> [ContinuousQueryGetSchemaOfQuery] in
                return Decoders.decode(clazz: [ContinuousQueryGetSchemaOfQuery].self, source: source)
            }
            // Decoder for ContinuousQueryGetSchemaOfQuery
            Decoders.addDecoder(clazz: ContinuousQueryGetSchemaOfQuery.self) { (source: AnyObject) -> ContinuousQueryGetSchemaOfQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQueryGetSchemaOfQuery()
                instance.names = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["names"])
                return instance
            }


            // Decoder for [ContinuousQueryTestQuery]
            Decoders.addDecoder(clazz: [ContinuousQueryTestQuery].self) { (source: AnyObject) -> [ContinuousQueryTestQuery] in
                return Decoders.decode(clazz: [ContinuousQueryTestQuery].self, source: source)
            }
            // Decoder for ContinuousQueryTestQuery
            Decoders.addDecoder(clazz: ContinuousQueryTestQuery.self) { (source: AnyObject) -> ContinuousQueryTestQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ContinuousQueryTestQuery()
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                return instance
            }


            // Decoder for [CreatePrecomputedTable]
            Decoders.addDecoder(clazz: [CreatePrecomputedTable].self) { (source: AnyObject) -> [CreatePrecomputedTable] in
                return Decoders.decode(clazz: [CreatePrecomputedTable].self, source: source)
            }
            // Decoder for CreatePrecomputedTable
            Decoders.addDecoder(clazz: CreatePrecomputedTable.self) { (source: AnyObject) -> CreatePrecomputedTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreatePrecomputedTable(collections: Decoders.decode(clazz: Array.self, source: sourceDictionary["collections"]!), dimensions: Decoders.decode(clazz: Array.self, source: sourceDictionary["dimensions"]!), aggregations: CreatePrecomputedTable.[Aggregations](rawValue: (sourceDictionary["aggregations"] as? String) ?? "")! , measures: Decoders.decode(clazz: Array.self, source: sourceDictionary["measures"]!), tableName: Decoders.decode(clazz: String.self, source: sourceDictionary["tableName"]!))
                return instance
            }


            // Decoder for [CreateProject]
            Decoders.addDecoder(clazz: [CreateProject].self) { (source: AnyObject) -> [CreateProject] in
                return Decoders.decode(clazz: [CreateProject].self, source: source)
            }
            // Decoder for CreateProject
            Decoders.addDecoder(clazz: CreateProject.self) { (source: AnyObject) -> CreateProject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CreateProject(name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!))
                instance.lockKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lock_key"])
                return instance
            }


            // Decoder for [EmailActionConfig]
            Decoders.addDecoder(clazz: [EmailActionConfig].self) { (source: AnyObject) -> [EmailActionConfig] in
                return Decoders.decode(clazz: [EmailActionConfig].self, source: source)
            }
            // Decoder for EmailActionConfig
            Decoders.addDecoder(clazz: EmailActionConfig.self) { (source: AnyObject) -> EmailActionConfig in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EmailActionConfig()
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.content = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["content"])
                instance.columnName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["columnName"])
                instance.defaultValues = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["defaultValues"])
                instance.richText = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["richText"])
                return instance
            }


            // Decoder for [ErrorMessage]
            Decoders.addDecoder(clazz: [ErrorMessage].self) { (source: AnyObject) -> [ErrorMessage] in
                return Decoders.decode(clazz: [ErrorMessage].self, source: source)
            }
            // Decoder for ErrorMessage
            Decoders.addDecoder(clazz: ErrorMessage.self) { (source: AnyObject) -> ErrorMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ErrorMessage()
                instance.error = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["error"])
                instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"])
                return instance
            }


            // Decoder for [Event]
            Decoders.addDecoder(clazz: [Event].self) { (source: AnyObject) -> [Event] in
                return Decoders.decode(clazz: [Event].self, source: source)
            }
            // Decoder for Event
            Decoders.addDecoder(clazz: Event.self) { (source: AnyObject) -> Event in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Event(collection: Decoders.decode(clazz: String.self, source: sourceDictionary["collection"]!), api: Decoders.decode(clazz: EventContext.self, source: sourceDictionary["api"]!), properties: Decoders.decode(clazz: AnyObject.self, source: sourceDictionary["properties"]!))
                return instance
            }


            // Decoder for [EventContext]
            Decoders.addDecoder(clazz: [EventContext].self) { (source: AnyObject) -> [EventContext] in
                return Decoders.decode(clazz: [EventContext].self, source: source)
            }
            // Decoder for EventContext
            Decoders.addDecoder(clazz: EventContext.self) { (source: AnyObject) -> EventContext in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventContext(apiKey: Decoders.decode(clazz: String.self, source: sourceDictionary["api_key"]!), library: Decoders.decode(clazz: Library.self, source: sourceDictionary["library"]!), apiVersion: Decoders.decode(clazz: String.self, source: sourceDictionary["api_version"]!), uploadTime: Decoders.decode(clazz: Int64.self, source: sourceDictionary["upload_time"]!), checksum: Decoders.decode(clazz: String.self, source: sourceDictionary["checksum"]!), plugins: Decoders.decode(clazz: Array.self, source: sourceDictionary["plugins"]!))
                return instance
            }


            // Decoder for [EventExplorerGetEventStatistics]
            Decoders.addDecoder(clazz: [EventExplorerGetEventStatistics].self) { (source: AnyObject) -> [EventExplorerGetEventStatistics] in
                return Decoders.decode(clazz: [EventExplorerGetEventStatistics].self, source: source)
            }
            // Decoder for EventExplorerGetEventStatistics
            Decoders.addDecoder(clazz: EventExplorerGetEventStatistics.self) { (source: AnyObject) -> EventExplorerGetEventStatistics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventExplorerGetEventStatistics()
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                return instance
            }


            // Decoder for [EventFilter]
            Decoders.addDecoder(clazz: [EventFilter].self) { (source: AnyObject) -> [EventFilter] in
                return Decoders.decode(clazz: [EventFilter].self, source: source)
            }
            // Decoder for EventFilter
            Decoders.addDecoder(clazz: EventFilter.self) { (source: AnyObject) -> EventFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventFilter()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.timeframe = Decoders.decodeOptional(clazz: Timeframe.self, source: sourceDictionary["timeframe"])
                instance.aggregation = Decoders.decodeOptional(clazz: EventFilterAggregation.self, source: sourceDictionary["aggregation"])
                instance.filterExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filterExpression"])
                return instance
            }


            // Decoder for [EventFilterAggregation]
            Decoders.addDecoder(clazz: [EventFilterAggregation].self) { (source: AnyObject) -> [EventFilterAggregation] in
                return Decoders.decode(clazz: [EventFilterAggregation].self, source: source)
            }
            // Decoder for EventFilterAggregation
            Decoders.addDecoder(clazz: EventFilterAggregation.self) { (source: AnyObject) -> EventFilterAggregation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventFilterAggregation()
                instance.field = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["field"])
                instance.minimum = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["minimum"])
                instance.maximum = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["maximum"])
                instance.type = EventFilterAggregation.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")
                return instance
            }


            // Decoder for [EventList]
            Decoders.addDecoder(clazz: [EventList].self) { (source: AnyObject) -> [EventList] in
                return Decoders.decode(clazz: [EventList].self, source: source)
            }
            // Decoder for EventList
            Decoders.addDecoder(clazz: EventList.self) { (source: AnyObject) -> EventList in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = EventList()
                instance.api = Decoders.decodeOptional(clazz: EventContext.self, source: sourceDictionary["api"])
                instance.events = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["events"])
                return instance
            }


            // Decoder for [Execute]
            Decoders.addDecoder(clazz: [Execute].self) { (source: AnyObject) -> [Execute] in
                return Decoders.decode(clazz: [Execute].self, source: source)
            }
            // Decoder for Execute
            Decoders.addDecoder(clazz: Execute.self) { (source: AnyObject) -> Execute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Execute(query: Decoders.decode(clazz: String.self, source: sourceDictionary["query"]!), exportType: Execute.ExportType(rawValue: (sourceDictionary["export_type"] as? String) ?? "")! )
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                return instance
            }


            // Decoder for [Explain]
            Decoders.addDecoder(clazz: [Explain].self) { (source: AnyObject) -> [Explain] in
                return Decoders.decode(clazz: [Explain].self, source: source)
            }
            // Decoder for Explain
            Decoders.addDecoder(clazz: Explain.self) { (source: AnyObject) -> Explain in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Explain(query: Decoders.decode(clazz: String.self, source: sourceDictionary["query"]!))
                return instance
            }


            // Decoder for [ExportQuery]
            Decoders.addDecoder(clazz: [ExportQuery].self) { (source: AnyObject) -> [ExportQuery] in
                return Decoders.decode(clazz: [ExportQuery].self, source: source)
            }
            // Decoder for ExportQuery
            Decoders.addDecoder(clazz: ExportQuery.self) { (source: AnyObject) -> ExportQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ExportQuery()
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.exportType = ExportQuery.ExportType(rawValue: (sourceDictionary["exportType"] as? String) ?? "")
                return instance
            }


            // Decoder for [FunnelQuery]
            Decoders.addDecoder(clazz: [FunnelQuery].self) { (source: AnyObject) -> [FunnelQuery] in
                return Decoders.decode(clazz: [FunnelQuery].self, source: source)
            }
            // Decoder for FunnelQuery
            Decoders.addDecoder(clazz: FunnelQuery.self) { (source: AnyObject) -> FunnelQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FunnelQuery()
                instance.steps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["steps"])
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.window = Decoders.decodeOptional(clazz: FunnelWindow.self, source: sourceDictionary["window"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                return instance
            }


            // Decoder for [FunnelStep]
            Decoders.addDecoder(clazz: [FunnelStep].self) { (source: AnyObject) -> [FunnelStep] in
                return Decoders.decode(clazz: [FunnelStep].self, source: source)
            }
            // Decoder for FunnelStep
            Decoders.addDecoder(clazz: FunnelStep.self) { (source: AnyObject) -> FunnelStep in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FunnelStep()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                return instance
            }


            // Decoder for [FunnelWindow]
            Decoders.addDecoder(clazz: [FunnelWindow].self) { (source: AnyObject) -> [FunnelWindow] in
                return Decoders.decode(clazz: [FunnelWindow].self, source: source)
            }
            // Decoder for FunnelWindow
            Decoders.addDecoder(clazz: FunnelWindow.self) { (source: AnyObject) -> FunnelWindow in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = FunnelWindow()
                instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"])
                instance.type = FunnelWindow.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")
                return instance
            }


            // Decoder for [GroupBy]
            Decoders.addDecoder(clazz: [GroupBy].self) { (source: AnyObject) -> [GroupBy] in
                return Decoders.decode(clazz: [GroupBy].self, source: source)
            }
            // Decoder for GroupBy
            Decoders.addDecoder(clazz: GroupBy.self) { (source: AnyObject) -> GroupBy in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GroupBy()
                instance.index = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["index"])
                instance.expression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expression"])
                return instance
            }


            // Decoder for [Library]
            Decoders.addDecoder(clazz: [Library].self) { (source: AnyObject) -> [Library] in
                return Decoders.decode(clazz: [Library].self, source: source)
            }
            // Decoder for Library
            Decoders.addDecoder(clazz: Library.self) { (source: AnyObject) -> Library in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Library(name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), version: Decoders.decode(clazz: String.self, source: sourceDictionary["version"]!))
                return instance
            }


            // Decoder for [MappingPlugin]
            Decoders.addDecoder(clazz: [MappingPlugin].self) { (source: AnyObject) -> [MappingPlugin] in
                return Decoders.decode(clazz: [MappingPlugin].self, source: source)
            }
            // Decoder for MappingPlugin
            Decoders.addDecoder(clazz: MappingPlugin.self) { (source: AnyObject) -> MappingPlugin in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MappingPlugin()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.arguments = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["arguments"])
                return instance
            }


            // Decoder for [MaterializedView]
            Decoders.addDecoder(clazz: [MaterializedView].self) { (source: AnyObject) -> [MaterializedView] in
                return Decoders.decode(clazz: [MaterializedView].self, source: source)
            }
            // Decoder for MaterializedView
            Decoders.addDecoder(clazz: MaterializedView.self) { (source: AnyObject) -> MaterializedView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedView(tableName: Decoders.decode(clazz: String.self, source: sourceDictionary["table_name"]!), name: Decoders.decode(clazz: String.self, source: sourceDictionary["name"]!), query: Decoders.decode(clazz: String.self, source: sourceDictionary["query"]!))
                instance.updateInterval = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["update_interval"])
                instance.incremental = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["incremental"])
                instance.options = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["options"])
                instance.lastUpdate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_update"])
                return instance
            }


            // Decoder for [MaterializedViewDeleteView]
            Decoders.addDecoder(clazz: [MaterializedViewDeleteView].self) { (source: AnyObject) -> [MaterializedViewDeleteView] in
                return Decoders.decode(clazz: [MaterializedViewDeleteView].self, source: source)
            }
            // Decoder for MaterializedViewDeleteView
            Decoders.addDecoder(clazz: MaterializedViewDeleteView.self) { (source: AnyObject) -> MaterializedViewDeleteView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedViewDeleteView()
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                return instance
            }


            // Decoder for [MaterializedViewGetSchemaOfView]
            Decoders.addDecoder(clazz: [MaterializedViewGetSchemaOfView].self) { (source: AnyObject) -> [MaterializedViewGetSchemaOfView] in
                return Decoders.decode(clazz: [MaterializedViewGetSchemaOfView].self, source: source)
            }
            // Decoder for MaterializedViewGetSchemaOfView
            Decoders.addDecoder(clazz: MaterializedViewGetSchemaOfView.self) { (source: AnyObject) -> MaterializedViewGetSchemaOfView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedViewGetSchemaOfView()
                instance.names = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["names"])
                return instance
            }


            // Decoder for [MaterializedViewGetView]
            Decoders.addDecoder(clazz: [MaterializedViewGetView].self) { (source: AnyObject) -> [MaterializedViewGetView] in
                return Decoders.decode(clazz: [MaterializedViewGetView].self, source: source)
            }
            // Decoder for MaterializedViewGetView
            Decoders.addDecoder(clazz: MaterializedViewGetView.self) { (source: AnyObject) -> MaterializedViewGetView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedViewGetView()
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                return instance
            }


            // Decoder for [MaterializedViewSchema]
            Decoders.addDecoder(clazz: [MaterializedViewSchema].self) { (source: AnyObject) -> [MaterializedViewSchema] in
                return Decoders.decode(clazz: [MaterializedViewSchema].self, source: source)
            }
            // Decoder for MaterializedViewSchema
            Decoders.addDecoder(clazz: MaterializedViewSchema.self) { (source: AnyObject) -> MaterializedViewSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MaterializedViewSchema()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                return instance
            }


            // Decoder for [Measure]
            Decoders.addDecoder(clazz: [Measure].self) { (source: AnyObject) -> [Measure] in
                return Decoders.decode(clazz: [Measure].self, source: source)
            }
            // Decoder for Measure
            Decoders.addDecoder(clazz: Measure.self) { (source: AnyObject) -> Measure in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Measure(column: Decoders.decode(clazz: String.self, source: sourceDictionary["column"]!), aggregation: Measure.Aggregation(rawValue: (sourceDictionary["aggregation"] as? String) ?? "")! )
                return instance
            }


            // Decoder for [MetadataResponse]
            Decoders.addDecoder(clazz: [MetadataResponse].self) { (source: AnyObject) -> [MetadataResponse] in
                return Decoders.decode(clazz: [MetadataResponse].self, source: source)
            }
            // Decoder for MetadataResponse
            Decoders.addDecoder(clazz: MetadataResponse.self) { (source: AnyObject) -> MetadataResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MetadataResponse()
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                instance.identifierColumn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifierColumn"])
                return instance
            }


            // Decoder for [ModuleDescriptor]
            Decoders.addDecoder(clazz: [ModuleDescriptor].self) { (source: AnyObject) -> [ModuleDescriptor] in
                return Decoders.decode(clazz: [ModuleDescriptor].self, source: source)
            }
            // Decoder for ModuleDescriptor
            Decoders.addDecoder(clazz: ModuleDescriptor.self) { (source: AnyObject) -> ModuleDescriptor in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModuleDescriptor()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.className = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["className"])
                instance.isActive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isActive"])
                instance.condition = Decoders.decodeOptional(clazz: Condition.self, source: sourceDictionary["condition"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [OLAPTable]
            Decoders.addDecoder(clazz: [OLAPTable].self) { (source: AnyObject) -> [OLAPTable] in
                return Decoders.decode(clazz: [OLAPTable].self, source: source)
            }
            // Decoder for OLAPTable
            Decoders.addDecoder(clazz: OLAPTable.self) { (source: AnyObject) -> OLAPTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OLAPTable(collections: Decoders.decode(clazz: Array.self, source: sourceDictionary["collections"]!), dimensions: Decoders.decode(clazz: Array.self, source: sourceDictionary["dimensions"]!), aggregations: OLAPTable.[Aggregations](rawValue: (sourceDictionary["aggregations"] as? String) ?? "")! , measures: Decoders.decode(clazz: Array.self, source: sourceDictionary["measures"]!), tableName: Decoders.decode(clazz: String.self, source: sourceDictionary["tableName"]!))
                return instance
            }


            // Decoder for [Ordering]
            Decoders.addDecoder(clazz: [Ordering].self) { (source: AnyObject) -> [Ordering] in
                return Decoders.decode(clazz: [Ordering].self, source: source)
            }
            // Decoder for Ordering
            Decoders.addDecoder(clazz: Ordering.self) { (source: AnyObject) -> Ordering in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Ordering()
                instance.ordering = Ordering.Ordering(rawValue: (sourceDictionary["ordering"] as? String) ?? "")
                instance.index = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["index"])
                instance.expression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expression"])
                return instance
            }


            // Decoder for [PrecalculatedTable]
            Decoders.addDecoder(clazz: [PrecalculatedTable].self) { (source: AnyObject) -> [PrecalculatedTable] in
                return Decoders.decode(clazz: [PrecalculatedTable].self, source: source)
            }
            // Decoder for PrecalculatedTable
            Decoders.addDecoder(clazz: PrecalculatedTable.self) { (source: AnyObject) -> PrecalculatedTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PrecalculatedTable()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tableName"])
                return instance
            }


            // Decoder for [ProjectAddCustomFieldsToSchema]
            Decoders.addDecoder(clazz: [ProjectAddCustomFieldsToSchema].self) { (source: AnyObject) -> [ProjectAddCustomFieldsToSchema] in
                return Decoders.decode(clazz: [ProjectAddCustomFieldsToSchema].self, source: source)
            }
            // Decoder for ProjectAddCustomFieldsToSchema
            Decoders.addDecoder(clazz: ProjectAddCustomFieldsToSchema.self) { (source: AnyObject) -> ProjectAddCustomFieldsToSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectAddCustomFieldsToSchema()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.schemaType = ProjectAddCustomFieldsToSchema.SchemaType(rawValue: (sourceDictionary["schema_type"] as? String) ?? "")
                instance.schema = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schema"])
                return instance
            }


            // Decoder for [ProjectAddFieldsToSchema]
            Decoders.addDecoder(clazz: [ProjectAddFieldsToSchema].self) { (source: AnyObject) -> [ProjectAddFieldsToSchema] in
                return Decoders.decode(clazz: [ProjectAddFieldsToSchema].self, source: source)
            }
            // Decoder for ProjectAddFieldsToSchema
            Decoders.addDecoder(clazz: ProjectAddFieldsToSchema.self) { (source: AnyObject) -> ProjectAddFieldsToSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectAddFieldsToSchema()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                instance.fields = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["fields"])
                return instance
            }


            // Decoder for [ProjectApiKeys]
            Decoders.addDecoder(clazz: [ProjectApiKeys].self) { (source: AnyObject) -> [ProjectApiKeys] in
                return Decoders.decode(clazz: [ProjectApiKeys].self, source: source)
            }
            // Decoder for ProjectApiKeys
            Decoders.addDecoder(clazz: ProjectApiKeys.self) { (source: AnyObject) -> ProjectApiKeys in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectApiKeys()
                instance.masterKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["master_key"])
                instance.readKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["read_key"])
                instance.writeKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["write_key"])
                return instance
            }


            // Decoder for [ProjectCheckApiKeys]
            Decoders.addDecoder(clazz: [ProjectCheckApiKeys].self) { (source: AnyObject) -> [ProjectCheckApiKeys] in
                return Decoders.decode(clazz: [ProjectCheckApiKeys].self, source: source)
            }
            // Decoder for ProjectCheckApiKeys
            Decoders.addDecoder(clazz: ProjectCheckApiKeys.self) { (source: AnyObject) -> ProjectCheckApiKeys in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectCheckApiKeys()
                instance.keys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["keys"])
                instance.project = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["project"])
                return instance
            }


            // Decoder for [ProjectGetStats]
            Decoders.addDecoder(clazz: [ProjectGetStats].self) { (source: AnyObject) -> [ProjectGetStats] in
                return Decoders.decode(clazz: [ProjectGetStats].self, source: source)
            }
            // Decoder for ProjectGetStats
            Decoders.addDecoder(clazz: ProjectGetStats.self) { (source: AnyObject) -> ProjectGetStats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectGetStats()
                return instance
            }


            // Decoder for [ProjectSchema]
            Decoders.addDecoder(clazz: [ProjectSchema].self) { (source: AnyObject) -> [ProjectSchema] in
                return Decoders.decode(clazz: [ProjectSchema].self, source: source)
            }
            // Decoder for ProjectSchema
            Decoders.addDecoder(clazz: ProjectSchema.self) { (source: AnyObject) -> ProjectSchema in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProjectSchema()
                instance.names = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["names"])
                return instance
            }


            // Decoder for [QueryError]
            Decoders.addDecoder(clazz: [QueryError].self) { (source: AnyObject) -> [QueryError] in
                return Decoders.decode(clazz: [QueryError].self, source: source)
            }
            // Decoder for QueryError
            Decoders.addDecoder(clazz: QueryError.self) { (source: AnyObject) -> QueryError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueryError()
                instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"])
                instance.sqlState = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sqlState"])
                instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["errorCode"])
                instance.errorLine = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["errorLine"])
                instance.charPositionInLine = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["charPositionInLine"])
                return instance
            }


            // Decoder for [QueryMetadata]
            Decoders.addDecoder(clazz: [QueryMetadata].self) { (source: AnyObject) -> [QueryMetadata] in
                return Decoders.decode(clazz: [QueryMetadata].self, source: source)
            }
            // Decoder for QueryMetadata
            Decoders.addDecoder(clazz: QueryMetadata.self) { (source: AnyObject) -> QueryMetadata in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueryMetadata()
                instance.query = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["query"])
                return instance
            }


            // Decoder for [QueryResult]
            Decoders.addDecoder(clazz: [QueryResult].self) { (source: AnyObject) -> [QueryResult] in
                return Decoders.decode(clazz: [QueryResult].self, source: source)
            }
            // Decoder for QueryResult
            Decoders.addDecoder(clazz: QueryResult.self) { (source: AnyObject) -> QueryResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = QueryResult(metadata: Decoders.decode(clazz: Array.self, source: sourceDictionary["metadata"]!), error: Decoders.decode(clazz: QueryError.self, source: sourceDictionary["error"]!), properties: Decoders.decode(clazz: Dictionary.self, source: sourceDictionary["properties"]!))
                instance.result = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["result"])
                instance.failed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["failed"])
                return instance
            }


            // Decoder for [RealTimeQueryResult]
            Decoders.addDecoder(clazz: [RealTimeQueryResult].self) { (source: AnyObject) -> [RealTimeQueryResult] in
                return Decoders.decode(clazz: [RealTimeQueryResult].self, source: source)
            }
            // Decoder for RealTimeQueryResult
            Decoders.addDecoder(clazz: RealTimeQueryResult.self) { (source: AnyObject) -> RealTimeQueryResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealTimeQueryResult()
                instance.start = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["end"])
                instance.result = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["result"])
                return instance
            }


            // Decoder for [RealTimeReport]
            Decoders.addDecoder(clazz: [RealTimeReport].self) { (source: AnyObject) -> [RealTimeReport] in
                return Decoders.decode(clazz: [RealTimeReport].self, source: source)
            }
            // Decoder for RealTimeReport
            Decoders.addDecoder(clazz: RealTimeReport.self) { (source: AnyObject) -> RealTimeReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealTimeReport()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.measures = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["measures"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                instance.collections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["collections"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.dimensions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dimensions"])
                return instance
            }


            // Decoder for [RealtimeDeleteTable]
            Decoders.addDecoder(clazz: [RealtimeDeleteTable].self) { (source: AnyObject) -> [RealtimeDeleteTable] in
                return Decoders.decode(clazz: [RealtimeDeleteTable].self, source: source)
            }
            // Decoder for RealtimeDeleteTable
            Decoders.addDecoder(clazz: RealtimeDeleteTable.self) { (source: AnyObject) -> RealtimeDeleteTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealtimeDeleteTable()
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                return instance
            }


            // Decoder for [RealtimeQueryTable]
            Decoders.addDecoder(clazz: [RealtimeQueryTable].self) { (source: AnyObject) -> [RealtimeQueryTable] in
                return Decoders.decode(clazz: [RealtimeQueryTable].self, source: source)
            }
            // Decoder for RealtimeQueryTable
            Decoders.addDecoder(clazz: RealtimeQueryTable.self) { (source: AnyObject) -> RealtimeQueryTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RealtimeQueryTable()
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.measure = Decoders.decodeOptional(clazz: Measure.self, source: sourceDictionary["measure"])
                instance.dimensions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dimensions"])
                instance.aggregate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["aggregate"])
                instance.dateStart = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date_start"])
                instance.dateEnd = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date_end"])
                return instance
            }


            // Decoder for [Recipe]
            Decoders.addDecoder(clazz: [Recipe].self) { (source: AnyObject) -> [Recipe] in
                return Decoders.decode(clazz: [Recipe].self, source: source)
            }
            // Decoder for Recipe
            Decoders.addDecoder(clazz: Recipe.self) { (source: AnyObject) -> Recipe in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Recipe()
                instance.strategy = Recipe.Strategy(rawValue: (sourceDictionary["strategy"] as? String) ?? "")
                instance.collections = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["collections"])
                instance.materializedViews = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["materialized_views"])
                instance.continuousQueries = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["continuous_queries"])
                return instance
            }


            // Decoder for [Reference]
            Decoders.addDecoder(clazz: [Reference].self) { (source: AnyObject) -> [Reference] in
                return Decoders.decode(clazz: [Reference].self, source: source)
            }
            // Decoder for Reference
            Decoders.addDecoder(clazz: Reference.self) { (source: AnyObject) -> Reference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Reference()
                instance.type = Reference.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [ResponseQuery]
            Decoders.addDecoder(clazz: [ResponseQuery].self) { (source: AnyObject) -> [ResponseQuery] in
                return Decoders.decode(clazz: [ResponseQuery].self, source: source)
            }
            // Decoder for ResponseQuery
            Decoders.addDecoder(clazz: ResponseQuery.self) { (source: AnyObject) -> ResponseQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseQuery()
                instance.groupBy = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["groupBy"])
                instance.orderBy = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["orderBy"])
                instance.limit = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["limit"])
                return instance
            }


            // Decoder for [RetentionAction]
            Decoders.addDecoder(clazz: [RetentionAction].self) { (source: AnyObject) -> [RetentionAction] in
                return Decoders.decode(clazz: [RetentionAction].self, source: source)
            }
            // Decoder for RetentionAction
            Decoders.addDecoder(clazz: RetentionAction.self) { (source: AnyObject) -> RetentionAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RetentionAction()
                instance.collection = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["collection"])
                return instance
            }


            // Decoder for [RetentionQuery]
            Decoders.addDecoder(clazz: [RetentionQuery].self) { (source: AnyObject) -> [RetentionQuery] in
                return Decoders.decode(clazz: [RetentionQuery].self, source: source)
            }
            // Decoder for RetentionQuery
            Decoders.addDecoder(clazz: RetentionQuery.self) { (source: AnyObject) -> RetentionQuery in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RetentionQuery()
                instance.firstAction = Decoders.decodeOptional(clazz: RetentionAction.self, source: sourceDictionary["first_action"])
                instance.returningAction = Decoders.decodeOptional(clazz: RetentionAction.self, source: sourceDictionary["returning_action"])
                instance.dimension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dimension"])
                instance.dateUnit = RetentionQuery.DateUnit(rawValue: (sourceDictionary["date_unit"] as? String) ?? "")
                instance.period = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["period"])
                instance.startDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["startDate"])
                instance.endDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["endDate"])
                return instance
            }


            // Decoder for [SchemaField]
            Decoders.addDecoder(clazz: [SchemaField].self) { (source: AnyObject) -> [SchemaField] in
                return Decoders.decode(clazz: [SchemaField].self, source: source)
            }
            // Decoder for SchemaField
            Decoders.addDecoder(clazz: SchemaField.self) { (source: AnyObject) -> SchemaField in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SchemaField()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = SchemaField.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")
                instance.unique = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["unique"])
                instance.descriptiveName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["descriptiveName"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                return instance
            }


            // Decoder for [SchemaFieldInfo]
            Decoders.addDecoder(clazz: [SchemaFieldInfo].self) { (source: AnyObject) -> [SchemaFieldInfo] in
                return Decoders.decode(clazz: [SchemaFieldInfo].self, source: source)
            }
            // Decoder for SchemaFieldInfo
            Decoders.addDecoder(clazz: SchemaFieldInfo.self) { (source: AnyObject) -> SchemaFieldInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SchemaFieldInfo()
                instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"])
                instance.type = SchemaFieldInfo.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "")
                return instance
            }


            // Decoder for [Sorting]
            Decoders.addDecoder(clazz: [Sorting].self) { (source: AnyObject) -> [Sorting] in
                return Decoders.decode(clazz: [Sorting].self, source: source)
            }
            // Decoder for Sorting
            Decoders.addDecoder(clazz: Sorting.self) { (source: AnyObject) -> Sorting in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Sorting()
                instance.column = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["column"])
                instance.order = Sorting.Order(rawValue: (sourceDictionary["order"] as? String) ?? "")
                return instance
            }


            // Decoder for [Stats]
            Decoders.addDecoder(clazz: [Stats].self) { (source: AnyObject) -> [Stats] in
                return Decoders.decode(clazz: [Stats].self, source: source)
            }
            // Decoder for Stats
            Decoders.addDecoder(clazz: Stats.self) { (source: AnyObject) -> Stats in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Stats()
                instance.allEvents = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["allEvents"])
                instance.monthlyEvents = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["monthlyEvents"])
                instance.dailyEvents = Decoders.decodeOptional(clazz: Int64.self, source: sourceDictionary["dailyEvents"])
                return instance
            }


            // Decoder for [SuccessMessage]
            Decoders.addDecoder(clazz: [SuccessMessage].self) { (source: AnyObject) -> [SuccessMessage] in
                return Decoders.decode(clazz: [SuccessMessage].self, source: source)
            }
            // Decoder for SuccessMessage
            Decoders.addDecoder(clazz: SuccessMessage.self) { (source: AnyObject) -> SuccessMessage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SuccessMessage(message: Decoders.decode(clazz: String.self, source: sourceDictionary["message"]!))
                instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"])
                return instance
            }


            // Decoder for [Timeframe]
            Decoders.addDecoder(clazz: [Timeframe].self) { (source: AnyObject) -> [Timeframe] in
                return Decoders.decode(clazz: [Timeframe].self, source: source)
            }
            // Decoder for Timeframe
            Decoders.addDecoder(clazz: Timeframe.self) { (source: AnyObject) -> Timeframe in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Timeframe()
                instance.start = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["start"])
                instance.end = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["end"])
                return instance
            }


            // Decoder for [User]
            Decoders.addDecoder(clazz: [User].self) { (source: AnyObject) -> [User] in
                return Decoders.decode(clazz: [User].self, source: source)
            }
            // Decoder for User
            Decoders.addDecoder(clazz: User.self) { (source: AnyObject) -> User in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = User()
                instance.id = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["id"])
                instance.api = Decoders.decodeOptional(clazz: UserContext.self, source: sourceDictionary["api"])
                instance.properties = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [UserContext]
            Decoders.addDecoder(clazz: [UserContext].self) { (source: AnyObject) -> [UserContext] in
                return Decoders.decode(clazz: [UserContext].self, source: source)
            }
            // Decoder for UserContext
            Decoders.addDecoder(clazz: UserContext.self) { (source: AnyObject) -> UserContext in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserContext(apiKey: Decoders.decode(clazz: String.self, source: sourceDictionary["api_key"]!), library: Decoders.decode(clazz: Library.self, source: sourceDictionary["library"]!), uploadTime: Decoders.decode(clazz: Int64.self, source: sourceDictionary["upload_time"]!), checksum: Decoders.decode(clazz: String.self, source: sourceDictionary["checksum"]!))
                return instance
            }


            // Decoder for [UserCreateSegment]
            Decoders.addDecoder(clazz: [UserCreateSegment].self) { (source: AnyObject) -> [UserCreateSegment] in
                return Decoders.decode(clazz: [UserCreateSegment].self, source: source)
            }
            // Decoder for UserCreateSegment
            Decoders.addDecoder(clazz: UserCreateSegment.self) { (source: AnyObject) -> UserCreateSegment in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserCreateSegment()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.tableName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["table_name"])
                instance.filterExpression = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter_expression"])
                instance.eventFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_filters"])
                instance.cacheEviction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cache_eviction"])
                return instance
            }


            // Decoder for [UserCreateUsers]
            Decoders.addDecoder(clazz: [UserCreateUsers].self) { (source: AnyObject) -> [UserCreateUsers] in
                return Decoders.decode(clazz: [UserCreateUsers].self, source: source)
            }
            // Decoder for UserCreateUsers
            Decoders.addDecoder(clazz: UserCreateUsers.self) { (source: AnyObject) -> UserCreateUsers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserCreateUsers()
                instance.users = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["users"])
                return instance
            }


            // Decoder for [UserEmailActionBatch]
            Decoders.addDecoder(clazz: [UserEmailActionBatch].self) { (source: AnyObject) -> [UserEmailActionBatch] in
                return Decoders.decode(clazz: [UserEmailActionBatch].self, source: source)
            }
            // Decoder for UserEmailActionBatch
            Decoders.addDecoder(clazz: UserEmailActionBatch.self) { (source: AnyObject) -> UserEmailActionBatch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserEmailActionBatch()
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.eventFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_filters"])
                instance.config = Decoders.decodeOptional(clazz: EmailActionConfig.self, source: sourceDictionary["config"])
                return instance
            }


            // Decoder for [UserEmailActionSend]
            Decoders.addDecoder(clazz: [UserEmailActionSend].self) { (source: AnyObject) -> [UserEmailActionSend] in
                return Decoders.decode(clazz: [UserEmailActionSend].self, source: source)
            }
            // Decoder for UserEmailActionSend
            Decoders.addDecoder(clazz: UserEmailActionSend.self) { (source: AnyObject) -> UserEmailActionSend in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserEmailActionSend()
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.config = Decoders.decodeOptional(clazz: EmailActionConfig.self, source: sourceDictionary["config"])
                return instance
            }


            // Decoder for [UserGetEvents]
            Decoders.addDecoder(clazz: [UserGetEvents].self) { (source: AnyObject) -> [UserGetEvents] in
                return Decoders.decode(clazz: [UserGetEvents].self, source: source)
            }
            // Decoder for UserGetEvents
            Decoders.addDecoder(clazz: UserGetEvents.self) { (source: AnyObject) -> UserGetEvents in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserGetEvents()
                instance.user = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                instance.offset = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["offset"])
                return instance
            }


            // Decoder for [UserGetUser]
            Decoders.addDecoder(clazz: [UserGetUser].self) { (source: AnyObject) -> [UserGetUser] in
                return Decoders.decode(clazz: [UserGetUser].self, source: source)
            }
            // Decoder for UserGetUser
            Decoders.addDecoder(clazz: UserGetUser.self) { (source: AnyObject) -> UserGetUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserGetUser()
                instance.user = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["user"])
                return instance
            }


            // Decoder for [UserIncrementProperty]
            Decoders.addDecoder(clazz: [UserIncrementProperty].self) { (source: AnyObject) -> [UserIncrementProperty] in
                return Decoders.decode(clazz: [UserIncrementProperty].self, source: source)
            }
            // Decoder for UserIncrementProperty
            Decoders.addDecoder(clazz: UserIncrementProperty.self) { (source: AnyObject) -> UserIncrementProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserIncrementProperty()
                instance.api = Decoders.decodeOptional(clazz: UserContext.self, source: sourceDictionary["api"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.property = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["property"])
                instance.value = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [UserSearchUsers]
            Decoders.addDecoder(clazz: [UserSearchUsers].self) { (source: AnyObject) -> [UserSearchUsers] in
                return Decoders.decode(clazz: [UserSearchUsers].self, source: source)
            }
            // Decoder for UserSearchUsers
            Decoders.addDecoder(clazz: UserSearchUsers.self) { (source: AnyObject) -> UserSearchUsers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserSearchUsers()
                instance.columns = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["columns"])
                instance.filter = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filter"])
                instance.eventFilters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["event_filters"])
                instance.sorting = Decoders.decodeOptional(clazz: Sorting.self, source: sourceDictionary["sorting"])
                instance.offset = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offset"])
                instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"])
                return instance
            }


            // Decoder for [UserUnsetProperty]
            Decoders.addDecoder(clazz: [UserUnsetProperty].self) { (source: AnyObject) -> [UserUnsetProperty] in
                return Decoders.decode(clazz: [UserUnsetProperty].self, source: source)
            }
            // Decoder for UserUnsetProperty
            Decoders.addDecoder(clazz: UserUnsetProperty.self) { (source: AnyObject) -> UserUnsetProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UserUnsetProperty()
                instance.api = Decoders.decodeOptional(clazz: UserContext.self, source: sourceDictionary["api"])
                instance.id = Decoders.decodeOptional(clazz: AnyObject.self, source: sourceDictionary["id"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }
        }
    }
}
