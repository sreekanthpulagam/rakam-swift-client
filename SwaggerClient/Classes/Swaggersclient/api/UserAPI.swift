//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class UserAPI: APIBase {
    /**
     Get events of the user
     
     - parameter userCreateSegment: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createSegment(userCreateSegment userCreateSegment: UserCreateSegment, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        createSegmentWithRequestBuilder(userCreateSegment: userCreateSegment).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get events of the user
     - POST /user/create_segment
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter userCreateSegment: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func createSegmentWithRequestBuilder(userCreateSegment userCreateSegment: UserCreateSegment) -> RequestBuilder<SuccessMessage> {
        let path = "/user/create_segment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userCreateSegment.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create new user
     
     - parameter user: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createUser(user user: User, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        createUserWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create new user
     - POST /user/create
     - 
     - examples: [{contentType=application/json, example=123}]
     
     - parameter user: (body)  

     - returns: RequestBuilder<Int32> 
     */
    public class func createUserWithRequestBuilder(user user: User) -> RequestBuilder<Int32> {
        let path = "/user/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = user.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Create multiple new users
     
     - parameter userCreateUsers: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createUsers(userCreateUsers userCreateUsers: UserCreateUsers, completion: ((data: [AnyObject]?, error: ErrorType?) -> Void)) {
        createUsersWithRequestBuilder(userCreateUsers: userCreateUsers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create multiple new users
     - POST /user/batch/create
     - Returns user ids. User id may be string or numeric.
     - API Key:
       - type: apiKey write_key 
       - name: write_key
     - examples: [{contentType=application/json, example=[ "{}" ]}]
     
     - parameter userCreateUsers: (body)  

     - returns: RequestBuilder<[AnyObject]> 
     */
    public class func createUsersWithRequestBuilder(userCreateUsers userCreateUsers: UserCreateUsers) -> RequestBuilder<[AnyObject]> {
        let path = "/user/batch/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userCreateUsers.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[AnyObject]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get events of the user
     
     - parameter userGetEvents: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getEvents(userGetEvents userGetEvents: UserGetEvents, completion: ((data: [CollectionEvent]?, error: ErrorType?) -> Void)) {
        getEventsWithRequestBuilder(userGetEvents: userGetEvents).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get events of the user
     - POST /user/get_events
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=[ {
  "collection" : "aeiou",
  "properties" : {
    "key" : "{}"
  }
} ]}]
     
     - parameter userGetEvents: (body)  

     - returns: RequestBuilder<[CollectionEvent]> 
     */
    public class func getEventsWithRequestBuilder(userGetEvents userGetEvents: UserGetEvents) -> RequestBuilder<[CollectionEvent]> {
        let path = "/user/get_events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userGetEvents.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[CollectionEvent]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get user storage metadata
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getMetadata(completion: ((data: MetadataResponse?, error: ErrorType?) -> Void)) {
        getMetadataWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user storage metadata
     - GET /user/metadata
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "columns" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ],
  "identifierColumn" : "aeiou"
}}]

     - returns: RequestBuilder<MetadataResponse> 
     */
    public class func getMetadataWithRequestBuilder() -> RequestBuilder<MetadataResponse> {
        let path = "/user/metadata"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MetadataResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get user
     
     - parameter userGetUser: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getUser(userGetUser userGetUser: UserGetUser, completion: ((data: User?, error: ErrorType?) -> Void)) {
        getUserWithRequestBuilder(userGetUser: userGetUser).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get user
     - POST /user/get
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "id" : "{}",
  "api" : {
    "upload_time" : 123456789,
    "library" : {
      "name" : "aeiou",
      "version" : "aeiou"
    },
    "api_key" : "aeiou",
    "checksum" : "aeiou"
  },
  "properties" : "{}"
}}]
     
     - parameter userGetUser: (body)  

     - returns: RequestBuilder<User> 
     */
    public class func getUserWithRequestBuilder(userGetUser userGetUser: UserGetUser) -> RequestBuilder<User> {
        let path = "/user/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userGetUser.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set user property
     
     - parameter userIncrementProperty: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func incrementProperty(userIncrementProperty userIncrementProperty: UserIncrementProperty, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        incrementPropertyWithRequestBuilder(userIncrementProperty: userIncrementProperty).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set user property
     - POST /user/increment_property
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter userIncrementProperty: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func incrementPropertyWithRequestBuilder(userIncrementProperty userIncrementProperty: UserIncrementProperty) -> RequestBuilder<SuccessMessage> {
        let path = "/user/increment_property"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userIncrementProperty.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Search users
     
     - parameter userSearchUsers: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func searchUsers(userSearchUsers userSearchUsers: UserSearchUsers, completion: ((data: QueryResult?, error: ErrorType?) -> Void)) {
        searchUsersWithRequestBuilder(userSearchUsers: userSearchUsers).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Search users
     - POST /user/search
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "result" : [ [ "{}" ] ],
  "metadata" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ],
  "failed" : true,
  "error" : {
    "charPositionInLine" : 123,
    "sqlState" : "aeiou",
    "errorCode" : 123,
    "message" : "aeiou",
    "errorLine" : 123
  },
  "properties" : {
    "key" : "{}"
  }
}}]
     
     - parameter userSearchUsers: (body)  

     - returns: RequestBuilder<QueryResult> 
     */
    public class func searchUsersWithRequestBuilder(userSearchUsers userSearchUsers: UserSearchUsers) -> RequestBuilder<QueryResult> {
        let path = "/user/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userSearchUsers.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<QueryResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set user properties
     
     - parameter user: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setProperties(user user: User, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        setPropertiesWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set user properties
     - POST /user/set_properties
     - 
     - examples: [{contentType=application/json, example=123}]
     
     - parameter user: (body)  

     - returns: RequestBuilder<Int32> 
     */
    public class func setPropertiesWithRequestBuilder(user user: User) -> RequestBuilder<Int32> {
        let path = "/user/set_properties"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = user.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Set user properties once
     
     - parameter user: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func setPropertiesOnce(user user: User, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        setPropertiesOnceWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Set user properties once
     - POST /user/set_properties_once
     - 
     - examples: [{contentType=application/json, example=123}]
     
     - parameter user: (body)  

     - returns: RequestBuilder<Int32> 
     */
    public class func setPropertiesOnceWithRequestBuilder(user user: User) -> RequestBuilder<Int32> {
        let path = "/user/set_properties_once"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = user.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Unset user property
     
     - parameter userUnsetProperty: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func unsetProperty(userUnsetProperty userUnsetProperty: UserUnsetProperty, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        unsetPropertyWithRequestBuilder(userUnsetProperty: userUnsetProperty).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Unset user property
     - POST /user/unset_properties
     - 
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter userUnsetProperty: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func unsetPropertyWithRequestBuilder(userUnsetProperty userUnsetProperty: UserUnsetProperty) -> RequestBuilder<SuccessMessage> {
        let path = "/user/unset_properties"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = userUnsetProperty.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
