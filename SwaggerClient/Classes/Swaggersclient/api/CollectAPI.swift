//
// CollectAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class CollectAPI: APIBase {
    /**
     Collect multiple events
     
     - parameter eventList: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func batchEvents(eventList eventList: EventList, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        batchEventsWithRequestBuilder(eventList: eventList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Collect multiple events
     - POST /event/batch
     - Returns 1 if the events are collected.
     - examples: [{contentType=application/json, example=123}]
     
     - parameter eventList: (body)  

     - returns: RequestBuilder<Int32> 
     */
    public class func batchEventsWithRequestBuilder(eventList eventList: EventList) -> RequestBuilder<Int32> {
        let path = "/event/batch"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = eventList.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Collect Bulk events
     
     - parameter eventList: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bulkEvents(eventList eventList: EventList, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        bulkEventsWithRequestBuilder(eventList: eventList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Collect Bulk events
     - POST /event/bulk
     - Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set 'collection' and 'master_key' query parameters if the content-type is not application/json.
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter eventList: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func bulkEventsWithRequestBuilder(eventList eventList: EventList) -> RequestBuilder<SuccessMessage> {
        let path = "/event/bulk"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = eventList.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Collect bulk events from remote
     
     - parameter bulkEventRemote: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func bulkEventsRemote(bulkEventRemote bulkEventRemote: BulkEventRemote, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        bulkEventsRemoteWithRequestBuilder(bulkEventRemote: bulkEventRemote).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Collect bulk events from remote
     - POST /event/bulk/remote
     - 
     - examples: [{contentType=application/json, example=123}]
     
     - parameter bulkEventRemote: (body)  

     - returns: RequestBuilder<Int32> 
     */
    public class func bulkEventsRemoteWithRequestBuilder(bulkEventRemote bulkEventRemote: BulkEventRemote) -> RequestBuilder<Int32> {
        let path = "/event/bulk/remote"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = bulkEventRemote.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Collect event
     
     - parameter event: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func collectEvent(event event: Event, completion: ((data: Int32?, error: ErrorType?) -> Void)) {
        collectEventWithRequestBuilder(event: event).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Collect event
     - POST /event/collect
     - 
     - examples: [{contentType=application/json, example=123}]
     
     - parameter event: (body)  

     - returns: RequestBuilder<Int32> 
     */
    public class func collectEventWithRequestBuilder(event event: Event) -> RequestBuilder<Int32> {
        let path = "/event/collect"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = event.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Int32>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Commit Bulk events
     
     - parameter commitBulkEvents: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func commitBulkEvents(commitBulkEvents commitBulkEvents: CommitBulkEvents, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        commitBulkEventsWithRequestBuilder(commitBulkEvents: commitBulkEvents).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Commit Bulk events
     - POST /event/bulk/commit
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter commitBulkEvents: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func commitBulkEventsWithRequestBuilder(commitBulkEvents commitBulkEvents: CommitBulkEvents) -> RequestBuilder<SuccessMessage> {
        let path = "/event/bulk/commit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = commitBulkEvents.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
