//
// ContinuousqueryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContinuousqueryAPI: APIBase {
    /**
     Create stream
     
     - parameter continuousQuery: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createQuery(continuousQuery continuousQuery: ContinuousQuery, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        createQueryWithRequestBuilder(continuousQuery: continuousQuery).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create stream
     - POST /continuous-query/create
     - Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter continuousQuery: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func createQueryWithRequestBuilder(continuousQuery continuousQuery: ContinuousQuery) -> RequestBuilder<SuccessMessage> {
        let path = "/continuous-query/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = continuousQuery.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete stream
     
     - parameter continuousQueryDeleteQuery: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteQuery(continuousQueryDeleteQuery continuousQueryDeleteQuery: ContinuousQueryDeleteQuery, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        deleteQueryWithRequestBuilder(continuousQueryDeleteQuery: continuousQueryDeleteQuery).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete stream
     - POST /continuous-query/delete
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter continuousQueryDeleteQuery: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func deleteQueryWithRequestBuilder(continuousQueryDeleteQuery continuousQueryDeleteQuery: ContinuousQueryDeleteQuery) -> RequestBuilder<SuccessMessage> {
        let path = "/continuous-query/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = continuousQueryDeleteQuery.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get continuous query
     
     - parameter continuousQueryGetQuery: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getQuery(continuousQueryGetQuery continuousQueryGetQuery: ContinuousQueryGetQuery, completion: ((data: ContinuousQuery?, error: ErrorType?) -> Void)) {
        getQueryWithRequestBuilder(continuousQueryGetQuery: continuousQueryGetQuery).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get continuous query
     - POST /continuous-query/get
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "query" : "aeiou",
  "name" : "aeiou",
  "options" : {
    "key" : "{}"
  },
  "partitionKeys" : [ "aeiou" ],
  "tableName" : "aeiou"
}}]
     
     - parameter continuousQueryGetQuery: (body)  

     - returns: RequestBuilder<ContinuousQuery> 
     */
    public class func getQueryWithRequestBuilder(continuousQueryGetQuery continuousQueryGetQuery: ContinuousQueryGetQuery) -> RequestBuilder<ContinuousQuery> {
        let path = "/continuous-query/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = continuousQueryGetQuery.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<ContinuousQuery>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get query schema
     
     - parameter continuousQueryGetSchemaOfQuery: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSchemaOfQuery(continuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery: ContinuousQueryGetSchemaOfQuery, completion: ((data: [Collection]?, error: ErrorType?) -> Void)) {
        getSchemaOfQueryWithRequestBuilder(continuousQueryGetSchemaOfQuery: continuousQueryGetSchemaOfQuery).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get query schema
     - POST /continuous-query/schema
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "fields" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ]
} ]}]
     
     - parameter continuousQueryGetSchemaOfQuery: (body)  

     - returns: RequestBuilder<[Collection]> 
     */
    public class func getSchemaOfQueryWithRequestBuilder(continuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery: ContinuousQueryGetSchemaOfQuery) -> RequestBuilder<[Collection]> {
        let path = "/continuous-query/schema"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = continuousQueryGetSchemaOfQuery.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Collection]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List queries
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listQueries(completion: ((data: [ContinuousQuery]?, error: ErrorType?) -> Void)) {
        listQueriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List queries
     - POST /continuous-query/list
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=[ {
  "query" : "aeiou",
  "name" : "aeiou",
  "options" : {
    "key" : "{}"
  },
  "partitionKeys" : [ "aeiou" ],
  "tableName" : "aeiou"
} ]}]

     - returns: RequestBuilder<[ContinuousQuery]> 
     */
    public class func listQueriesWithRequestBuilder() -> RequestBuilder<[ContinuousQuery]> {
        let path = "/continuous-query/list"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ContinuousQuery]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Test continuous query
     
     - parameter continuousQueryTestQuery: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func testQuery(continuousQueryTestQuery continuousQueryTestQuery: ContinuousQueryTestQuery, completion: ((data: Bool?, error: ErrorType?) -> Void)) {
        testQueryWithRequestBuilder(continuousQueryTestQuery: continuousQueryTestQuery).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Test continuous query
     - POST /continuous-query/test
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=true}]
     
     - parameter continuousQueryTestQuery: (body)  

     - returns: RequestBuilder<Bool> 
     */
    public class func testQueryWithRequestBuilder(continuousQueryTestQuery continuousQueryTestQuery: ContinuousQueryTestQuery) -> RequestBuilder<Bool> {
        let path = "/continuous-query/test"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = continuousQueryTestQuery.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Bool>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
