//
// RealtimeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class RealtimeAPI: APIBase {
    /**
     Create report
     
     - parameter realTimeReport: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createTable(realTimeReport realTimeReport: RealTimeReport, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        createTableWithRequestBuilder(realTimeReport: realTimeReport).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create report
     - POST /realtime/create
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter realTimeReport: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func createTableWithRequestBuilder(realTimeReport realTimeReport: RealTimeReport) -> RequestBuilder<SuccessMessage> {
        let path = "/realtime/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = realTimeReport.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete report
     
     - parameter realtimeDeleteTable: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteTable(realtimeDeleteTable realtimeDeleteTable: RealtimeDeleteTable, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        deleteTableWithRequestBuilder(realtimeDeleteTable: realtimeDeleteTable).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete report
     - POST /realtime/delete
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter realtimeDeleteTable: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func deleteTableWithRequestBuilder(realtimeDeleteTable realtimeDeleteTable: RealtimeDeleteTable) -> RequestBuilder<SuccessMessage> {
        let path = "/realtime/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = realtimeDeleteTable.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List queries
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listTables(completion: ((data: [ContinuousQuery]?, error: ErrorType?) -> Void)) {
        listTablesWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List queries
     - POST /realtime/list
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=[ {
  "query" : "aeiou",
  "name" : "aeiou",
  "options" : {
    "key" : "{}"
  },
  "partitionKeys" : [ "aeiou" ],
  "tableName" : "aeiou"
} ]}]

     - returns: RequestBuilder<[ContinuousQuery]> 
     */
    public class func listTablesWithRequestBuilder() -> RequestBuilder<[ContinuousQuery]> {
        let path = "/realtime/list"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ContinuousQuery]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get report
     
     - parameter realtimeQueryTable: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func queryTable(realtimeQueryTable realtimeQueryTable: RealtimeQueryTable, completion: ((data: RealTimeQueryResult?, error: ErrorType?) -> Void)) {
        queryTableWithRequestBuilder(realtimeQueryTable: realtimeQueryTable).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get report
     - POST /realtime/get
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "result" : "{}",
  "start" : 123456789,
  "end" : 123456789
}}]
     
     - parameter realtimeQueryTable: (body)  

     - returns: RequestBuilder<RealTimeQueryResult> 
     */
    public class func queryTableWithRequestBuilder(realtimeQueryTable realtimeQueryTable: RealtimeQueryTable) -> RequestBuilder<RealTimeQueryResult> {
        let path = "/realtime/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = realtimeQueryTable.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<RealTimeQueryResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
