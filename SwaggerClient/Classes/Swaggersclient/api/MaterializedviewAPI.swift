//
// MaterializedviewAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class MaterializedviewAPI: APIBase {
    /**
     Create view
     
     - parameter materializedView: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createView(materializedView materializedView: MaterializedView, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        createViewWithRequestBuilder(materializedView: materializedView).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Create view
     - POST /materialized-view/create
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter materializedView: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func createViewWithRequestBuilder(materializedView materializedView: MaterializedView) -> RequestBuilder<SuccessMessage> {
        let path = "/materialized-view/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = materializedView.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Delete materialized view
     
     - parameter materializedViewDeleteView: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteView(materializedViewDeleteView materializedViewDeleteView: MaterializedViewDeleteView, completion: ((data: SuccessMessage?, error: ErrorType?) -> Void)) {
        deleteViewWithRequestBuilder(materializedViewDeleteView: materializedViewDeleteView).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete materialized view
     - POST /materialized-view/delete
     - 
     - API Key:
       - type: apiKey master_key 
       - name: master_key
     - examples: [{contentType=application/json, example={
  "success" : true,
  "message" : "aeiou"
}}]
     
     - parameter materializedViewDeleteView: (body)  

     - returns: RequestBuilder<SuccessMessage> 
     */
    public class func deleteViewWithRequestBuilder(materializedViewDeleteView materializedViewDeleteView: MaterializedViewDeleteView) -> RequestBuilder<SuccessMessage> {
        let path = "/materialized-view/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = materializedViewDeleteView.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<SuccessMessage>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get schemas
     
     - parameter materializedViewGetSchemaOfView: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSchemaOfView(materializedViewGetSchemaOfView materializedViewGetSchemaOfView: MaterializedViewGetSchemaOfView, completion: ((data: [MaterializedViewSchema]?, error: ErrorType?) -> Void)) {
        getSchemaOfViewWithRequestBuilder(materializedViewGetSchemaOfView: materializedViewGetSchemaOfView).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get schemas
     - POST /materialized-view/schema
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "fields" : [ {
    "descriptiveName" : "aeiou",
    "unique" : true,
    "name" : "aeiou",
    "description" : "aeiou",
    "type" : "aeiou",
    "category" : "aeiou"
  } ]
} ]}]
     
     - parameter materializedViewGetSchemaOfView: (body)  

     - returns: RequestBuilder<[MaterializedViewSchema]> 
     */
    public class func getSchemaOfViewWithRequestBuilder(materializedViewGetSchemaOfView materializedViewGetSchemaOfView: MaterializedViewGetSchemaOfView) -> RequestBuilder<[MaterializedViewSchema]> {
        let path = "/materialized-view/schema"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = materializedViewGetSchemaOfView.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[MaterializedViewSchema]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get view
     
     - parameter materializedViewGetView: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getView(materializedViewGetView materializedViewGetView: MaterializedViewGetView, completion: ((data: MaterializedView?, error: ErrorType?) -> Void)) {
        getViewWithRequestBuilder(materializedViewGetView: materializedViewGetView).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get view
     - POST /materialized-view/get
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example={
  "update_interval" : "aeiou",
  "query" : "aeiou",
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "options" : {
    "key" : "{}"
  },
  "incremental" : true,
  "table_name" : "aeiou"
}}]
     
     - parameter materializedViewGetView: (body)  

     - returns: RequestBuilder<MaterializedView> 
     */
    public class func getViewWithRequestBuilder(materializedViewGetView materializedViewGetView: MaterializedViewGetView) -> RequestBuilder<MaterializedView> {
        let path = "/materialized-view/get"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = materializedViewGetView.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<MaterializedView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List views
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func listViews(completion: ((data: [MaterializedView]?, error: ErrorType?) -> Void)) {
        listViewsWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List views
     - POST /materialized-view/list
     - 
     - API Key:
       - type: apiKey read_key 
       - name: read_key
     - examples: [{contentType=application/json, example=[ {
  "update_interval" : "aeiou",
  "query" : "aeiou",
  "last_update" : "2000-01-23T04:56:07.000+00:00",
  "name" : "aeiou",
  "options" : {
    "key" : "{}"
  },
  "incremental" : true,
  "table_name" : "aeiou"
} ]}]

     - returns: RequestBuilder<[MaterializedView]> 
     */
    public class func listViewsWithRequestBuilder() -> RequestBuilder<[MaterializedView]> {
        let path = "/materialized-view/list"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[MaterializedView]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
